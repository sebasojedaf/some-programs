# -*- coding: utf-8 -*-
"""Informe investigación experimental

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AnEaYSueL8Uz6TYCms-NC1kRg6ssBqyc
"""

#M*exp(-0.5*(x-u/s)*(x-u/s))+a0+a1*(x-u)
from numpy.core.fromnumeric import size
import pandas as pd
from matplotlib.colors import LogNorm
import numpy as np
import random
from scipy.optimize import curve_fit
import matplotlib.pyplot as plt
from google.colab import files
from sympy import integrate, init_printing
from sympy.abc import z,a,b
#uploaded = files.upload()
#def funn(x, M):#,a0,a1
    #return M*np.exp(-0.5*((x-u/s)**2))#+a0+a1*(x-u)
#  y= M*np.exp(-(x-330)**2/(2*270**2))
 # return y
def gauss_f(x,A,mu,sig,B,C):
    return A*np.exp(-0.5*(x-mu)**2/sig**2)+B+C*(x-mu)

def code():
  xx=np.linspace(720,880,161)
  y=[]
  x=np.linspace(720,880,161)
  yy=[]
  datos2 = []
  with open("parafina02.txt") as fname:
      for lineas in fname:
          datos2.extend(lineas.split())
  for i in range(len(datos2)):
    y.append(float(datos2[i]))
    #if i!=0:
    #  y.append(float(datos2[i-1]))
  print(y, yy)
  #3 (x,4.43540989e+02, 7.99609836e+02, 2.30893799e+01, 8.53236415e+01, -6.38802747e-01) # 2 (x,5.32428650e+02,7.98732989e+02,2.34190887e+01,8.25434315e+01,-6.66417589e-01)#(x,6.24203740e+02,7.97961786e+02,2.31475283e+01,8.42963406e+01,-6.25291754e-01)# 0 (x,7.21053094e+02, 7.92168242e+02, -2.27855161e+01, 9.05858814e+01, -6.73018601e-01)

  yy=gauss_f(x,7.21053094e+02, 7.92168242e+02, -2.27855161e+01, 9.05858814e+01, -6.73018601e-01)
  plt.scatter(x, yy, color = "blue", label="Ajuste")
  plt.legend(loc='upper right')
  plt.scatter(x, y, color = "red", label="Parafina aire")
  plt.legend(loc='upper right')
  #plt.errorbar(x,y,yerr=y_erorr, ecolor="black",fmt=".")
  plt.grid(True)
  plt.xlabel("$Eγ$ (canal)", size = 11)
  plt.ylabel("$I$γ (cuentas/canal)", size = 11)
  plt.legend()
  plt.show()
  popt, pcov = curve_fit(gauss_f, x, y, p0=[2000, 790, 60,100,50])
  print(popt,pcov)
if __name__ == "__main__":
    code()





from numpy.core.fromnumeric import size
import pandas as pd
from matplotlib.colors import LogNorm
import numpy as np
import random
from scipy.optimize import curve_fit
import matplotlib.pyplot as plt
from google.colab import files
from sympy import integrate, init_printing
from sympy.abc import z,a,b
#uploaded = files.upload()
#def funn(x, M):#,a0,a1
    #return M*np.exp(-0.5*((x-u/s)**2))#+a0+a1*(x-u)
#  y= M*np.exp(-(x-330)**2/(2*270**2))
 # return y
def gauss_f(x,A,mu,sig,B,C):
    return A*np.exp(-0.5*(x-mu)**2/sig**2)+B+C*(x-mu)
def gauss(x,I,mu):
    return I*np.exp(-mu*(x))

def code():
  xd=[1,3,9]
  yd=[34326,26395,11694]
  error=[1045,892,433]
  xx=np.linspace(720,880,161)
  y=[]
  x=np.linspace(720,880,161)
  yy=[]
  yyy=[]
  datos2 = []
  with open("arena9.txt") as fname:
      for lineas in fname:
          datos2.extend(lineas.split())
  for i in range(len(datos2)):
    y.append(float(datos2[i]))

  #3 (x,4.43540989e+02, 7.99609836e+02, 2.30893799e+01, 8.53236415e+01, -6.38802747e-01) # 2 (x,5.32428650e+02,7.98732989e+02,2.34190887e+01,8.25434315e+01,-6.66417589e-01)# 1 (x,6.24203740e+02,7.97961786e+02,2.31475283e+01,8.42963406e+01,-6.25291754e-01)# 0 (x,7.21053094e+02, 7.92168242e+02, -2.27855161e+01, 9.05858814e+01, -6.73018601e-01)

  yy=gauss_f(x,2.17247857e+02, 7.85534308e+02, -2.15141227e+01, 8.66531046e+01, -6.48464268e-01)

  yyy=8.66531046e+01-6.48464268e-01*(x-7.85534308e+02)
  xf=np.linspace(1,9,10)
  yf=gauss(xf,2000,790)
  plt.scatter(xd, yd, color = "blue", label="Ajuste")
  plt.errorbar(xd,yd,yerr=error, ecolor="black",fmt=".")
  plt.legend(loc='upper right')
  plt.scatter(xf, yf, color = "yellow", label="Fondo")
  plt.legend(loc='upper right')
  #plt.scatter(x, yyy, color = "yellow", label="Fondo")
  plt.yscale("log")
  plt.grid(True)
  plt.xlabel("$Eγ$ (canal)", size = 11)
  plt.ylabel("$I$γ (cuentas/canal)", size = 11)
  plt.legend()
  plt.show()
  popt, pcov = curve_fit(gauss, xd, yd, p0=[200, 79])
  print(popt)
if __name__ == "__main__":
    code()





import pandas as pd
from numpy.core.fromnumeric import size
from matplotlib.colors import LogNorm
import numpy as np
import random
from scipy.optimize import curve_fit
import matplotlib.pyplot as plt
from google.colab import files
def ajuste_f(x,I,mu):
    return I*np.exp(-mu*x)

xd=[1,3,9]
yd=[34326,26395,11694]
error=[1045,892,433]
xf=np.linspace(1,9,100)
yf=ajuste_f(xf, 20000.0, 790.0)
print(xf,yf)
plt.scatter(xd, yd, color = "blue", label="Ajuste")
plt.errorbar(xd,yd,yerr=error, ecolor="black",fmt=".")
plt.legend(loc='upper right')
plt.plot(xf, yf, color = "red", label="Fondo")
plt.legend(loc='upper right')
plt.grid(True)
plt.yscale("log")
plt.xlabel(" Grosor(cm)", size = 11)
plt.ylabel("Intensidad(cuentas)", size = 11)
plt.legend()
plt.show()
popt, pcov = curve_fit(ajuste_f, xd, yd, p0=[2000, 5000])
print(popt)





import numpy as np
import matplotlib.pyplot as plt
import scipy as sp
import scipy.optimize


def main():
    # Actual parameters
    A0, K0 = 2.5, -4.0
    xd=[1,3,9]
    yd=[34326,26395,11694]
    error=[1045,892,433]
    # Generate some data based on these
    tmin, tmax = 1, 9
    num = 100
    xf = np.linspace(tmin, tmax, num)
    yf = model_func(xf, A0, K0)

    plt.scatter(xd, yd, color = "blue", label="Ajuste")
    plt.errorbar(xd,yd,yerr=error, ecolor="black",fmt=".")
    plt.legend(loc='upper right')
    plt.plot(xf, yf, color = "red", label="Fondo")
    plt.legend(loc='upper right')
    plt.grid(True)
    plt.yscale("log")
    plt.xlabel(" Grosor(cm)", size = 11)
    plt.ylabel("Intensidad(cuentas)", size = 11)
    plt.legend()
    plt.show()
    popt, pcov = curve_fit(model_func, xd, yd, p0=[200, 500])
    print(popt)

def model_func(t, A, K ):
    return A * np.exp(-1.0*K * t)
if __name__ == '__main__':
  main()





from __future__ import print_function
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
xdata=np.linspace(720,880,161)

ydata=[]
datos2 = []
with open("parafina00.txt") as fname:
	for lineas in fname:
		datos2.extend(lineas.split())
for i in range(len(datos2)):
    ydata.append(float(datos2[i]))
# Define the Gaussian function
def Gauss(x, A, B):
    y = A*np.exp(-1*B*x**2)
    return y
print( ydata,fit_y)
plt.plot(xdata, ydata, 'o')
parameters, covariance = curve_fit(Gauss, xdata, ydata)

fit_A = parameters[0]
fit_B = parameters[1]

fit_y = Gauss(xdata, fit_A, fit_B)
print( ydata,fit_y)
plt.plot(xdata, ydata, 'o', label='data')
plt.plot(xdata, fit_y, '-', label='fit')
plt.legend()



from numpy.core.fromnumeric import size
import pandas as pd
from matplotlib.colors import LogNorm
import numpy as np
import random
from scipy.optimize import curve_fit
import matplotlib.pyplot as plt
from google.colab import files
from sympy import integrate, init_printing
from sympy.abc import z,a,b
#uploaded = files.upload()
def ss_f(x,A,C):
  return C*(x**-A)
    #return C/(x**A)
def code():
  x=[]
  xx=np.linspace(0,5,5000)
  y=[]
  datos2 = []
  with open("photonabsortion.txt") as fname:
      for lineas in fname:
          datos2.extend(lineas.split())
  for i in range(5,len(datos2),2):
    y.append(float(datos2[i]))
    if i!=0:
      x.append(float(datos2[i-1]))
  print(y)
  print(x)
  #yy=ss_f(xx,1.07464735,981.72946587)

  yy=ss_f(xx,1.95,7.5)
  y_erorr=1
  #yy=ss_f(xx,1.6464735,1.24614387)
  #yy=ss_f(xx,0.0599330748836575,104300.42806413)
  plt.plot(xx, yy, color = "blue", label="Ajuste")
  plt.legend(loc='upper right')
  plt.scatter(x, y, color = "red", label="Datos γ-Pb ")
  #plt.legend(loc='upper right')
  plt.errorbar(x,y,yerr=y_erorr, ecolor="black",fmt=".")
  plt.grid(True)
  plt.xscale("log")
  plt.yscale("log")
  plt.xlabel("$Eγ$ (MeV)", size = 11)
  plt.ylabel("Sección eficaz (barn/átomo)", size = 11)
  plt.legend()
  plt.show()
  popt, pcov = curve_fit(ss_f, x, y, p0=[1.0,800])
  print(popt,pcov)
if __name__ == "__main__":
    code()



from numpy.core.fromnumeric import size
import pandas as pd
from matplotlib.colors import LogNorm
import numpy as np
import random
import math
from scipy.optimize import curve_fit
import matplotlib.pyplot as plt
from google.colab import files
from sympy import integrate, init_printing
from sympy.abc import z,a,b
#uploaded = files.upload()
def funsec(x,C):
  e=C/511.0
  a=1.0+np.cos(x)**2+(((e*(1.0-np.cos(x)))**2)/(1.0+e*(1.0-np.cos(x))))
  b=(1.0+e*(1.0-np.cos(x)))**2
  return 0.5*a/b
  #return 0.5*(1+((e*(1-np.cos(x)))**2)/(1+e*(1-np.cos(x)))+np.cos(x)**2)/(1+e*(1-np.cos(x)))**2
    #return C/(x**A)
def code():

  xx=np.linspace(0,180,1000)
  #x=np.cos(np.radians(xx))
  x=np.radians(xx)
  y1=funsec(x,10.0)
  y2=funsec(x,100.0)
  y3=funsec(x,511.0)
  y4=funsec(x,1333.0)
  print(x[0],xx[0])
  print(y1[0],y2[0],y3[0],y4[0])
  plt.scatter(xx, y1, color = "#003399", label="$E$ 10 keV ")
  plt.scatter(xx, y2, color = "#FF7F00", label="$E$ 100 keV ")
  plt.scatter(xx, y3, color = "#339900", label="$E$ 511 keV ")
  plt.scatter(xx, y4, color = "#CC0000", label="$E$ 1333 keV ")
  #plt.legend(loc='upper right')
  #plt.errorbar(x,y,yerr=y_erorr, ecolor="black",fmt=".")
  plt.xticks(np.linspace(0, 180, 7))
  plt.grid(True)
  plt.xlabel("$ θ◦$", size = 11)
  plt.ylabel("dσ/dΩ (barn/átomo)", size = 11)
  plt.legend()
  plt.show()



if __name__ == "__main__":
    code()